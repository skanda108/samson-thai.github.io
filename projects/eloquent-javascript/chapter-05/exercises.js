// /////////////////////////////////////////////////////////////////////////////
// flatten /////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function flatten(array) {
  return array.reduce((acc, current) => {
    return acc.concat(current);
  }, []);
}

// /////////////////////////////////////////////////////////////////////////////
// loop ////////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function loop(start, duration, increment, body) {     //4 inputs, start, duration, increment, body
  for (let i = start; duration(i); i = increment(i)){
    body(i);
  }
}

// /////////////////////////////////////////////////////////////////////////////
// every ///////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function every(array, test) {
  for (let i = 0; i < array.length; i++){
    if (!test(array[i])){
      return false;
    }
  }
  return true;
}

// /////////////////////////////////////////////////////////////////////////////
// dominantDirection ///////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function dominantDirection(string) {      //use countBy and characterScript
//create a variable ltr and initialize as empty array
let ltr = [];
//create a variable rtl and initialize as empty array
let rtl = [];

//iterate through string using for loop
for (let i = 0; i < string.length; i++){
  // create a variable script and assign it the result of invoking characterScript on current character's char code
  let script = characterScript(string.charCodeAt(i)); //script = {...}

  // determine if script is not equal to null
  if (script !== null){
    if (script.direction === 'ltr'){
      ltr.push(script);
    } else {
      rtl.push(script);
    }
  }
}

if (ltr.length > rtl.length){
  return 'ltr';
} else {
  return 'rtl';
}
}

// /////////////////////////////////////////////////////////////////////////////
//  //////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    flatten,
    loop,
    every,
    dominantDirection,
  };
};
