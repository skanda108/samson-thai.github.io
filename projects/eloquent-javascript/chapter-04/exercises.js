////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(a, b, step) {
  let arr = [];
  if (a === b){
    return arr;
  }
  if (step === undefined){
    step = 1;
  }
  if (step >= 1){
    for (let i = a; i <= b; i += step){
      arr.push(i);
    }
  } else {
    for (let i = a; i >=b; i += step){
      arr.push(i);
    }
  }

  return arr;
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
  if (array === []){
    return 0;
  }
  let total = 0;
  for (let i = 0; i < array.length; i++){
    total += array[i];
  }
  return total;

}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
  let out = [];
  for (let i = 0; i < array.length; i++){
    out.unshift(array[i]);
  }
  return out;

}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
  let leftSide = 0;
  let rightSide = array.length - 1;

  while (leftSide < rightSide){
    let old = array[leftSide];
    array[leftSide] = array[rightSide];
    array[rightSide] = old;

    leftSide++;
    rightSide--;
  }
  return array;
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  let rest = null;

  //iterate through input array
  for (let i = array.length - 1; i >= 0; i--){
    rest = { value: array[i], rest: rest };
  }

  return rest;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list, array=[]) {
  //base
  if (list.rest === null){
    array.push(list.value);
    return array;
  }
  //recursion
  array.push(list.value);

  return listToArray(list.rest, array);
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend() {

}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth() {

}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual() {

}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
